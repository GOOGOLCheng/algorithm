#include <stdio.h>

// 辅助函数：打印数组
void print_array(int arr[], int n) {
    // 遍历数组并打印每个元素
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 冒泡排序函数
void bubble_sort(int arr[], int n) {
    int i, j, temp;
    int swap_flag;
    int passes = 0;

    // 外循环，用于迭代每一趟排序
    for (i = 0; i < n - 1; i++) {
        printf("Pass %d:\n", i + 1);
        swap_flag = 0;  // 用于判断本趟排序是否发生了交换

        // 内循环，用于将较小的元素“冒泡”到前面
        for (j = n - 1; j > i; j--) {
            // 如果后面的元素小于前面的元素，则交换它们
            if (arr[j] < arr[j - 1]) {
                printf("Swapping %d and %d\n", arr[j], arr[j - 1]);
                temp = arr[j];
                arr[j] = arr[j - 1];
                arr[j - 1] = temp;
                swap_flag = 1;  // 发生了交换，设置标志为1
            }
            print_array(arr, n);  // 打印当前排序过程中的数组状态
        }

        passes++;  // 每完成一趟排序，计数器加1

        // 如果本趟排序没有发生交换，说明数组已经有序，可以提前退出循环
        if (swap_flag == 0) {
            break;
        }
    }

    printf("Minimum number of passes required: %d\n", passes);
}

int main() {
    int data[] = {8, 9, 10, 4, 5, 6, 20, 1, 2};  // 原始数据
    int n = sizeof(data) / sizeof(data[0]);  // 计算数组的元素个数

    printf("Original array:\n");
    print_array(data, n);  // 打印原始数组

    printf("\nBubble sort process:\n");
    bubble_sort(data, n);  // 调用冒泡排序函数对数组进行排序

    return 0;
}
